#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef enum {false, true} bool;

#define ALPHABET_SIZE 256
#define MAX_PATTERN_SIZE 16




//расчёт степеней числа для быстрого рассчёта хэша
void init_pows(int base, int count, unsigned int *buf)
{
    int i;
    buf[0] = 1;
    for (i=1;i<count;i++)
    {
        buf[i] = buf[i-1]*base;
    }
}

//сравнение на заданных позициях в шаблоне и строке
bool cmp_elems(FILE *out, int pos_buf, int pos_pattern, int pat_len, unsigned char *pattern, unsigned char *buf)
{
    fprintf(out, " %d", pos_buf+1);
    return (buf[pos_buf % pat_len]==pattern[pos_pattern]);
}

//считать строку в заданный буфер
int readln(FILE *f, unsigned char *str_array)
{
    int res = 0;
    while (true)
    {
        int ch = fgetc(f);
        if ((ch==-1)) break;
        if (ch=='\n') break;
        *str_array = ((unsigned char) ch);
        str_array++;
        res++;
    }
    return res;
}

long hash_chr(unsigned char ch, int pos, unsigned int *pows_arr)
{
    return (ch % 3)*pows_arr[pos];
}
long hash_substr(int from, int to, unsigned char *string, unsigned int *pows_arr)
{
    long hash = 0;
    int i;
    for (i=from;i<to;i++)
    {
        hash+=hash_chr(string[i], i, pows_arr);
    };
    return hash;
}

bool cmp_substr(FILE *out, int from, int pat_len, unsigned char *pattern, unsigned char *buf)
{
    int i;
    for (i=0;i<pat_len;i++)
        if (!cmp_elems(out, i+from, i, pat_len, pattern, buf)) return false;
    return true;
}
int main()
{
    FILE *in = fopen("in.txt", "r");
    FILE *out = fopen("out.txt", "w");
    unsigned char pattern[MAX_PATTERN_SIZE];
    int pat_len = readln(in, pattern);
    int buf_len = 0;
    unsigned int pow3s[MAX_PATTERN_SIZE];
    init_pows(3, pat_len, pow3s);
    int tmp_ch;
    unsigned char buf[MAX_PATTERN_SIZE];
    while ((buf_len<pat_len) &&((tmp_ch = fgetc(in))!=EOF))
    {
        buf[buf_len++] = tmp_ch;
    }

    long hash_pattern = hash_substr(0, pat_len, pattern, pow3s);

    fprintf(out, "%ld", hash_pattern);

    if (buf_len>=pat_len)
    {
        long temp_hash = hash_substr(0, pat_len, buf, pow3s);
        if (temp_hash==hash_pattern)
                cmp_substr(out, 0, pat_len, pattern, buf);
        int buf_len_mod_pat_len = 0;
        for (buf_len=pat_len;(tmp_ch = fgetc(in))!=EOF;buf_len++)
        {
            temp_hash -= buf[buf_len_mod_pat_len] % 3;
            temp_hash /= 3;
            buf[buf_len_mod_pat_len] = tmp_ch;
            temp_hash += (buf[buf_len_mod_pat_len] % 3)*pow3s[pat_len-1];
            if (temp_hash==hash_pattern)
                cmp_substr(out, buf_len-pat_len+1, pat_len, pattern, buf);
            buf_len_mod_pat_len++;
            if (buf_len_mod_pat_len==pat_len) buf_len_mod_pat_len = 0;
        };
    }

    fclose(in);
    fclose(out);
    return 0;
}
